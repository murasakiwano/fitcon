// Code generated by templ@v0.2.334 DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import (
	"bytes"
	"context"
	"io"

	"github.com/a-h/templ"
)

import "github.com/murasakiwano/fitcon/internal/fitconner"

func UserTable(fc fitconner.FitConner) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"card\" class=\"container mx-auto dark:bg-gray-700\"><div class=\"mx-auto max-w-xl overflow-hidden rounded-lg bg-white shadow-xl dark:bg-gray-700\"><div class=\"flex items-center justify-between p-6\"><h1 class=\"text-xl font-semibold text-gray-700 dark:text-gray-100\">")
		if err != nil {
			return err
		}
		var_2 := `Suas metas no FitCon`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><img src=\"img/logo.png\" alt=\"Logo\" class=\"h-12 w-auto\"></div><table class=\"min-w-full divide-y divide-gray-200\"><tbody class=\"bg-gray-50 dark:bg-gray-700\"><tr>")
		if err != nil {
			return err
		}
		err = titleCell("Matrícula").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<td></td>")
		if err != nil {
			return err
		}
		err = bodyCell(fc.ID).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr><tr>")
		if err != nil {
			return err
		}
		err = titleCell("Equipe").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<td></td>")
		if err != nil {
			return err
		}
		err = bodyCell(fc.TeamName).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr><tr>")
		if err != nil {
			return err
		}
		err = titleCell("Nome").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<td></td>")
		if err != nil {
			return err
		}
		err = bodyCell(fc.Name).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr><tr>")
		if err != nil {
			return err
		}
		err = titleCell("Equipe").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<td></td>")
		if err != nil {
			return err
		}
		err = bodyCell(fc.TeamName).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr><tr>")
		if err != nil {
			return err
		}
		err = goalTitleCell("1").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = bodyCell("Percentual de Gordura").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = bodyCell(fc.Goal1FatPercentage).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr><tr>")
		if err != nil {
			return err
		}
		err = bodyCell("Massa Magra").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = bodyCell(fc.Goal1LeanMass).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr><tr>")
		if err != nil {
			return err
		}
		err = goalTitleCell("2").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = bodyCell("Gordura Visceral").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = bodyCell(fc.Goal2VisceralFat).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr><tr>")
		if err != nil {
			return err
		}
		err = bodyCell("Gordura Corporal").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = bodyCell(fc.Goal2FatPercentage).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr><tr>")
		if err != nil {
			return err
		}
		err = bodyCell("Massa Magra").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = bodyCell(fc.Goal2LeanMass).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tr></tbody></table></div>")
		if err != nil {
			return err
		}
		err = Button("← Voltar ").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func bodyCell(text string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<td class=\"whitespace-nowrap px-6 py-4\"><div class=\"text-sm text-gray-500 dark:text-gray-300\">")
		if err != nil {
			return err
		}
		var var_4 string = text
		_, err = templBuffer.WriteString(templ.EscapeString(var_4))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></td>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func titleCell(text string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_5 := templ.GetChildren(ctx)
		if var_5 == nil {
			var_5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<td class=\"whitespace-nowrap px-6 py-4\"><div class=\"text-sm font-medium text-gray-900 dark:text-gray-50\">")
		if err != nil {
			return err
		}
		var var_6 string = text
		_, err = templBuffer.WriteString(templ.EscapeString(var_6))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></td>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func goalTitleCell(num string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_7 := templ.GetChildren(ctx)
		if var_7 == nil {
			var_7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<td class=\"whitespace-nowrap px-6 py-4\" rowspan=\"2\"><div class=\"text-sm font-medium text-gray-900 dark:text-gray-50\">")
		if err != nil {
			return err
		}
		var_8 := `Meta `
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		var var_9 string = num
		_, err = templBuffer.WriteString(templ.EscapeString(var_9))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></td>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
