// Code generated by templ@v0.2.334 DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func CreateUser() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		err = Container(card()).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func card() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		err = header().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = body().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = Button("Criar Participante").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func header() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<h1 class=\"mb-4 text-2xl font-semibold text-gray-700 dark:text-gray-50\">")
		if err != nil {
			return err
		}
		var_4 := `Criar novo Usuário`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func body() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_5 := templ.GetChildren(ctx)
		if var_5 == nil {
			var_5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		err = FormInput("fullName", "Nome Completo", "text", "fullName", "fullName", "John Doe", true).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = FormInput("matricula", "Matrícula", "text", "matricula", "matricula", "C012345", true).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = FormInput("goal1FatPercentage", "Meta 1 - Percentual de Gordura", "text", "goal1FatPercentage", "goal1FatPercentage", "Meta", true).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = FormInput("goal1LeanMass", "Meta 1 - Massa Magra", "text", "goal1LeanMass", "goal1LeanMass", "Meta", true).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = FormInput("goal2FatPercentage", "Meta 2 - Percentual de Gordura", "text", "goal2FatPercentage", "goal2FatPercentage", "Meta", true).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = FormInput("goal2LeanMass", "Meta 2 - Massa Magra", "text", "goal2LeanMass", "goal2LeanMass", "Meta", true).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = FormInput("goal2VisceralFat", "Meta 2 - Gordura Visceral", "text", "goal2VisceralFat", "goal2VisceralFat", "Meta", true).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = FormInput("teamName", "Equipe", "text", "teamName", "teamName", "Nome da Equipe", true).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = FormInput("teamNumber", "Número da Equipe", "text", "teamNumber", "teamNumber", "Número da Equipe", true).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
